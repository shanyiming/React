{"ast":null,"code":"import _defineProperty from \"/Users/yimingshan/Workplace/my-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/yimingshan/Workplace/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yimingshan/Workplace/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yimingshan/Workplace/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yimingshan/Workplace/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yimingshan/Workplace/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/yimingshan/Workplace/my-app/src/components/contentlist/Charts/CircularGridLine/circularGridLine.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport MyTemplet from '../../../templet';\nimport { XYPlot, XAxis, YAxis, MarkSeries, CircularGridLines } from 'react-vis';\nimport CodeBlock from '../../../';\nimport ReactMarkdown from 'react-markdown';\n\nvar MyCircularGridLine =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MyCircularGridLine, _Component);\n\n  function MyCircularGridLine() {\n    _classCallCheck(this, MyCircularGridLine);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MyCircularGridLine).apply(this, arguments));\n  }\n\n  _createClass(MyCircularGridLine, [{\n    key: \"renderCircular\",\n    value: function renderCircular() {\n      var data = [{\n        r: 1,\n        theta: Math.PI / 3,\n        size: 8\n      }, {\n        r: 2,\n        theta: 2 * Math.PI / 3,\n        size: 10\n      }, {\n        r: 2.5,\n        theta: Math.PI,\n        size: 5\n      }, {\n        r: 3,\n        theta: 9 * Math.PI / 5,\n        size: 12\n      }, {\n        r: 4,\n        theta: Math.PI / 4,\n        size: 5\n      }, {\n        r: 6,\n        theta: 6 * Math.PI / 4,\n        size: 10\n      }, {\n        r: 5,\n        theta: Math.PI / 3,\n        size: 5\n      }, {\n        r: 8,\n        theta: 2 * Math.PI,\n        size: 15\n      }, {\n        r: 8.5,\n        theta: Math.PI,\n        size: 15\n      }, {\n        r: 9.2,\n        theta: 7 * Math.PI / 4,\n        size: 12\n      }, {\n        r: 10,\n        theta: Math.PI / 4,\n        size: 5\n      }, {\n        r: 6,\n        theta: 4 * Math.PI / 3,\n        size: 15\n      }, {\n        r: 10,\n        theta: 5 * Math.PI / 4,\n        size: 15\n      }, {\n        r: 8,\n        theta: 4 * Math.PI / 3,\n        size: 10\n      }, {\n        r: 7.7,\n        theta: 4 * Math.PI / 5,\n        size: 9\n      }, {\n        r: 9.5,\n        theta: 3 * Math.PI / 2,\n        size: 12\n      }, {\n        r: 8,\n        theta: Math.PI / 2,\n        size: 15\n      }];\n      var margin = {\n        top: 20,\n        bottom: 20,\n        left: 20,\n        right: 20\n      };\n      var WIDTH = 600;\n      var HEIGHT = 600;\n      return React.createElement(\"div\", {\n        className: \"circular-display\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(XYPlot, {\n        margin: margin,\n        xDomain: [-10, 10],\n        yDomain: [-10, 10],\n        width: WIDTH,\n        height: HEIGHT,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(CircularGridLines, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), React.createElement(XAxis, {\n        top: (HEIGHT - margin.top) / 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }), React.createElement(YAxis, {\n        left: (WIDTH - margin.left - margin.right) / 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), React.createElement(MarkSeries, {\n        strokeWidth: 2,\n        sizeRange: [5, 15],\n        data: data.map(function (row) {\n          return _objectSpread({}, row, {\n            x: Math.cos(row.theta) * row.r,\n            y: Math.sin(row.theta) * row.r\n          });\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var output = this.renderCircular();\n      var myName = \"Circular Grid Line\";\n      var string = \"\\n    import {XYPlot, XAxis, YAxis, MarkSeries, CircularGridLines} from 'react-vis';\\n\\n    renderCircular()\\n    {\\n      const data = [\\n        {r: 1, theta: Math.PI / 2, size: 10},\\n        {r: 2, theta: (3 * Math.PI) / 2, size: 15},\\n        {r: 2.5, theta: Math.PI, size: 5},\\n        {r: 3, theta: (8 * Math.PI) / 5, size: 5},\\n      ];\\n\\n      const WIDTH = 300;\\n      const HEIGHT = 300;\\n\\n      return (\\n        <div>\\n          <XYPlot\\n          margin={margin}\\n          xDomain={[-4, 4]}\\n          yDomain={[-4, 4]}\\n          width={WIDTH}\\n          height={HEIGHT}\\n          >\\n          <CircularGridLines />\\n          <XAxis top={(HEIGHT) / 2} />\\n          <YAxis left={(WIDTH) / 2} />\\n          <MarkSeries\\n            strokeWidth={2}\\n            sizeRange={[5, 15]}\\n            data={data.map(row => ({\\n              ...row,\\n              x: Math.cos(row.theta) * row.r,\\n              y: Math.sin(row.theta) * row.r\\n            }))}\\n          />\\n        </XYPlot>\\n        </div>\\n      );\\n    }\\n    \";\n      var code = React.createElement(ReactMarkdown, {\n        source: string,\n        renderers: {\n          code: CodeBlock\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(MyTemplet, {\n        content: output,\n        name: myName,\n        sampleUsage: code,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MyCircularGridLine;\n}(Component);\n\nexport default MyCircularGridLine;","map":{"version":3,"sources":["/Users/yimingshan/Workplace/my-app/src/components/contentlist/Charts/CircularGridLine/circularGridLine.js"],"names":["React","Component","MyTemplet","XYPlot","XAxis","YAxis","MarkSeries","CircularGridLines","CodeBlock","ReactMarkdown","MyCircularGridLine","data","r","theta","Math","PI","size","margin","top","bottom","left","right","WIDTH","HEIGHT","map","row","x","cos","y","sin","output","renderCircular","myName","string","code"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAuB,kBAAvB;AACA,SAAQC,MAAR,EAAgBC,KAAhB,EAAuBC,KAAvB,EAA8BC,UAA9B,EAA0CC,iBAA1C,QAAkE,WAAlE;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;;IAEMC,kB;;;;;;;;;;;;;qCAIJ;AACE,UAAMC,IAAI,GAAG,CACX;AAACC,QAAAA,CAAC,EAAE,CAAJ;AAAOC,QAAAA,KAAK,EAAEC,IAAI,CAACC,EAAL,GAAU,CAAxB;AAA2BC,QAAAA,IAAI,EAAE;AAAjC,OADW,EAEX;AAACJ,QAAAA,CAAC,EAAE,CAAJ;AAAOC,QAAAA,KAAK,EAAG,IAAIC,IAAI,CAACC,EAAV,GAAgB,CAA9B;AAAiCC,QAAAA,IAAI,EAAE;AAAvC,OAFW,EAGX;AAACJ,QAAAA,CAAC,EAAE,GAAJ;AAASC,QAAAA,KAAK,EAAEC,IAAI,CAACC,EAArB;AAAyBC,QAAAA,IAAI,EAAE;AAA/B,OAHW,EAIX;AAACJ,QAAAA,CAAC,EAAE,CAAJ;AAAOC,QAAAA,KAAK,EAAG,IAAIC,IAAI,CAACC,EAAV,GAAgB,CAA9B;AAAiCC,QAAAA,IAAI,EAAE;AAAvC,OAJW,EAKX;AAACJ,QAAAA,CAAC,EAAE,CAAJ;AAAOC,QAAAA,KAAK,EAAEC,IAAI,CAACC,EAAL,GAAU,CAAxB;AAA2BC,QAAAA,IAAI,EAAE;AAAjC,OALW,EAMX;AAACJ,QAAAA,CAAC,EAAE,CAAJ;AAAOC,QAAAA,KAAK,EAAG,IAAIC,IAAI,CAACC,EAAV,GAAgB,CAA9B;AAAiCC,QAAAA,IAAI,EAAE;AAAvC,OANW,EAOX;AAACJ,QAAAA,CAAC,EAAE,CAAJ;AAAOC,QAAAA,KAAK,EAAEC,IAAI,CAACC,EAAL,GAAU,CAAxB;AAA2BC,QAAAA,IAAI,EAAE;AAAjC,OAPW,EAQX;AAACJ,QAAAA,CAAC,EAAE,CAAJ;AAAOC,QAAAA,KAAK,EAAG,IAAIC,IAAI,CAACC,EAAxB;AAA8BC,QAAAA,IAAI,EAAE;AAApC,OARW,EASX;AAACJ,QAAAA,CAAC,EAAE,GAAJ;AAASC,QAAAA,KAAK,EAAEC,IAAI,CAACC,EAArB;AAAyBC,QAAAA,IAAI,EAAE;AAA/B,OATW,EAUX;AAACJ,QAAAA,CAAC,EAAE,GAAJ;AAASC,QAAAA,KAAK,EAAG,IAAIC,IAAI,CAACC,EAAV,GAAgB,CAAhC;AAAmCC,QAAAA,IAAI,EAAE;AAAzC,OAVW,EAWX;AAACJ,QAAAA,CAAC,EAAE,EAAJ;AAAQC,QAAAA,KAAK,EAAEC,IAAI,CAACC,EAAL,GAAU,CAAzB;AAA4BC,QAAAA,IAAI,EAAE;AAAlC,OAXW,EAYX;AAACJ,QAAAA,CAAC,EAAE,CAAJ;AAAOC,QAAAA,KAAK,EAAG,IAAIC,IAAI,CAACC,EAAV,GAAgB,CAA9B;AAAiCC,QAAAA,IAAI,EAAE;AAAvC,OAZW,EAaX;AAACJ,QAAAA,CAAC,EAAE,EAAJ;AAAQC,QAAAA,KAAK,EAAG,IAAGC,IAAI,CAACC,EAAT,GAAe,CAA9B;AAAiCC,QAAAA,IAAI,EAAE;AAAvC,OAbW,EAcX;AAACJ,QAAAA,CAAC,EAAE,CAAJ;AAAOC,QAAAA,KAAK,EAAG,IAAIC,IAAI,CAACC,EAAV,GAAgB,CAA9B;AAAkCC,QAAAA,IAAI,EAAE;AAAxC,OAdW,EAeX;AAACJ,QAAAA,CAAC,EAAE,GAAJ;AAASC,QAAAA,KAAK,EAAG,IAAIC,IAAI,CAACC,EAAV,GAAe,CAA/B;AAAkCC,QAAAA,IAAI,EAAE;AAAxC,OAfW,EAgBX;AAACJ,QAAAA,CAAC,EAAE,GAAJ;AAASC,QAAAA,KAAK,EAAG,IAAGC,IAAI,CAACC,EAAT,GAAe,CAA/B;AAAkCC,QAAAA,IAAI,EAAE;AAAxC,OAhBW,EAiBX;AAACJ,QAAAA,CAAC,EAAE,CAAJ;AAAOC,QAAAA,KAAK,EAAGC,IAAI,CAACC,EAAN,GAAY,CAA1B;AAA6BC,QAAAA,IAAI,EAAE;AAAnC,OAjBW,CAAb;AAoBA,UAAMC,MAAM,GAAG;AACbC,QAAAA,GAAG,EAAE,EADQ;AAEbC,QAAAA,MAAM,EAAE,EAFK;AAGbC,QAAAA,IAAI,EAAE,EAHO;AAIbC,QAAAA,KAAK,EAAE;AAJM,OAAf;AAOA,UAAMC,KAAK,GAAG,GAAd;AACA,UAAMC,MAAM,GAAG,GAAf;AAEA,aACE;AAAK,QAAA,SAAS,EAAG,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AACA,QAAA,MAAM,EAAEN,MADR;AAEA,QAAA,OAAO,EAAE,CAAC,CAAC,EAAF,EAAM,EAAN,CAFT;AAGA,QAAA,OAAO,EAAE,CAAC,CAAC,EAAF,EAAM,EAAN,CAHT;AAIA,QAAA,KAAK,EAAEK,KAJP;AAKA,QAAA,MAAM,EAAEC,MALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOA,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPA,EAQA,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAE,CAACA,MAAM,GAAGN,MAAM,CAACC,GAAjB,IAAwB,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARA,EASA,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,CAACI,KAAK,GAAGL,MAAM,CAACG,IAAf,GAAsBH,MAAM,CAACI,KAA9B,IAAuC,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATA,EAUA,oBAAC,UAAD;AACE,QAAA,WAAW,EAAE,CADf;AAEE,QAAA,SAAS,EAAE,CAAC,CAAD,EAAI,EAAJ,CAFb;AAGE,QAAA,IAAI,EAAEV,IAAI,CAACa,GAAL,CAAS,UAAAC,GAAG;AAAA,mCACbA,GADa;AAEhBC,YAAAA,CAAC,EAAEZ,IAAI,CAACa,GAAL,CAASF,GAAG,CAACZ,KAAb,IAAsBY,GAAG,CAACb,CAFb;AAGhBgB,YAAAA,CAAC,EAAEd,IAAI,CAACe,GAAL,CAASJ,GAAG,CAACZ,KAAb,IAAsBY,GAAG,CAACb;AAHb;AAAA,SAAZ,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVA,CADF,CADF;AAwBD;;;6BAED;AACE,UAAIkB,MAAM,GAAG,KAAKC,cAAL,EAAb;AACA,UAAIC,MAAM,GAAG,oBAAb;AACA,UAAIC,MAAM,uhCAAV;AAyCA,UAAIC,IAAI,GAAI,oBAAC,aAAD;AAAe,QAAA,MAAM,EAAED,MAAvB;AAA+B,QAAA,SAAS,EAAE;AAAEC,UAAAA,IAAI,EAAE1B;AAAR,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAZ;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,SAAD;AAAW,QAAA,OAAO,EAAIsB,MAAtB;AAA8B,QAAA,IAAI,EAAIE,MAAtC;AAA8C,QAAA,WAAW,EAAIE,IAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CADF;AAKD;;;;EA/G8BjC,S;;AAkHjC,eAAeS,kBAAf","sourcesContent":["import React, { Component } from 'react';\nimport MyTemplet  from '../../../templet';\nimport {XYPlot, XAxis, YAxis, MarkSeries, CircularGridLines} from 'react-vis';\nimport CodeBlock from '../../../';\nimport ReactMarkdown from 'react-markdown';\n\nclass MyCircularGridLine extends Component\n{\n\n  renderCircular()\n  {\n    const data = [\n      {r: 1, theta: Math.PI / 3, size: 8},\n      {r: 2, theta: (2 * Math.PI) / 3, size: 10},\n      {r: 2.5, theta: Math.PI, size: 5},\n      {r: 3, theta: (9 * Math.PI) / 5, size: 12},\n      {r: 4, theta: Math.PI / 4, size: 5},\n      {r: 6, theta: (6 * Math.PI) / 4, size: 10},\n      {r: 5, theta: Math.PI / 3, size: 5},\n      {r: 8, theta: (2 * Math.PI) , size: 15},\n      {r: 8.5, theta: Math.PI, size: 15},\n      {r: 9.2, theta: (7 * Math.PI) / 4, size: 12},\n      {r: 10, theta: Math.PI / 4, size: 5},\n      {r: 6, theta: (4 * Math.PI) / 3, size: 15},\n      {r: 10, theta: (5 *Math.PI) / 4, size: 15},\n      {r: 8, theta: (4 * Math.PI) / 3 , size: 10},\n      {r: 7.7, theta: (4 * Math.PI) /5, size: 9},\n      {r: 9.5, theta: (3* Math.PI) / 2, size: 12},\n      {r: 8, theta: (Math.PI) / 2, size: 15},\n    ];\n\n    const margin = {\n      top: 20,\n      bottom: 20,\n      left: 20,\n      right: 20\n    };\n\n    const WIDTH = 600;\n    const HEIGHT = 600;\n\n    return (\n      <div className = \"circular-display\">\n        <XYPlot\n        margin={margin}\n        xDomain={[-10, 10]}\n        yDomain={[-10, 10]}\n        width={WIDTH}\n        height={HEIGHT}\n        >\n        <CircularGridLines />\n        <XAxis top={(HEIGHT - margin.top) / 2} />\n        <YAxis left={(WIDTH - margin.left - margin.right) / 2} />\n        <MarkSeries\n          strokeWidth={2}\n          sizeRange={[5, 15]}\n          data={data.map(row => ({\n            ...row,\n            x: Math.cos(row.theta) * row.r,\n            y: Math.sin(row.theta) * row.r\n          }))}\n        />\n      </XYPlot>\n      </div>\n    );\n  }\n  render()\n  {\n    let output = this.renderCircular();\n    let myName = \"Circular Grid Line\";\n    let string = `\n    import {XYPlot, XAxis, YAxis, MarkSeries, CircularGridLines} from 'react-vis';\n\n    renderCircular()\n    {\n      const data = [\n        {r: 1, theta: Math.PI / 2, size: 10},\n        {r: 2, theta: (3 * Math.PI) / 2, size: 15},\n        {r: 2.5, theta: Math.PI, size: 5},\n        {r: 3, theta: (8 * Math.PI) / 5, size: 5},\n      ];\n\n      const WIDTH = 300;\n      const HEIGHT = 300;\n\n      return (\n        <div>\n          <XYPlot\n          margin={margin}\n          xDomain={[-4, 4]}\n          yDomain={[-4, 4]}\n          width={WIDTH}\n          height={HEIGHT}\n          >\n          <CircularGridLines />\n          <XAxis top={(HEIGHT) / 2} />\n          <YAxis left={(WIDTH) / 2} />\n          <MarkSeries\n            strokeWidth={2}\n            sizeRange={[5, 15]}\n            data={data.map(row => ({\n              ...row,\n              x: Math.cos(row.theta) * row.r,\n              y: Math.sin(row.theta) * row.r\n            }))}\n          />\n        </XYPlot>\n        </div>\n      );\n    }\n    `;\n    let code = (<ReactMarkdown source={string} renderers={{ code: CodeBlock }}/>);\n    return(\n      <div>\n      <MyTemplet content = {output} name = {myName} sampleUsage = {code}/>\n      </div>\n    );\n  }\n}\n\nexport default MyCircularGridLine;\n"]},"metadata":{},"sourceType":"module"}