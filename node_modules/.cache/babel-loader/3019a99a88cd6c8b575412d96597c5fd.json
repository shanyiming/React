{"ast":null,"code":"import _classCallCheck from \"/Users/yimingshan/Workplace/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yimingshan/Workplace/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yimingshan/Workplace/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yimingshan/Workplace/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yimingshan/Workplace/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectWithoutProperties from \"/Users/yimingshan/Workplace/my-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/yimingshan/Workplace/my-app/src/components/contentlist/Components/Notification/notification.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Button from '@material-ui/core/Button';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { withStyles } from '@material-ui/core/styles';\nimport MyTemplete from '../../../templete';\nimport CodeBlock from '../../../';\nimport ReactMarkdown from 'react-markdown';\nvar variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\n\nvar styles1 = function styles1(theme) {\n  return {\n    success: {\n      backgroundColor: green[600]\n    },\n    error: {\n      backgroundColor: theme.palette.error.dark\n    },\n    info: {\n      backgroundColor: theme.palette.primary.dark\n    },\n    warning: {\n      backgroundColor: amber[700]\n    },\n    icon: {\n      fontSize: 20\n    },\n    iconVariant: {\n      opacity: 0.9,\n      marginRight: theme.spacing.unit\n    },\n    message: {\n      display: 'flex',\n      alignItems: 'center'\n    }\n  };\n};\n\nfunction MySnackbarContent(props) {\n  var classes = props.classes,\n      className = props.className,\n      message = props.message,\n      onClose = props.onClose,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"message\", \"onClose\", \"variant\"]);\n\n  var Icon = variantIcon[variant];\n  return React.createElement(SnackbarContent, Object.assign({\n    className: classNames(classes[variant], className),\n    \"aria-describedby\": \"client-snackbar\",\n    message: React.createElement(\"span\", {\n      id: \"client-snackbar\",\n      className: classes.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      className: classNames(classes.icon, classes.iconVariant),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), message),\n    action: [React.createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"Close\",\n      color: \"#A52A2A\",\n      className: classes.close,\n      onClick: onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      className: classes.icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }))]\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }));\n}\n\nMySnackbarContent.propTypes = {\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  message: PropTypes.node,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired\n};\nvar MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);\n\nvar styles2 = function styles2(theme) {\n  return {\n    margin: {\n      margin: theme.spacing.unit\n    }\n  };\n};\n\nvar MyNotification =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MyNotification, _React$Component);\n\n  function MyNotification() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MyNotification);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MyNotification)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      open: false\n    };\n\n    _this.handleClick = function () {\n      _this.setState({\n        open: true\n      });\n    };\n\n    _this.handleClose = function (event, reason) {\n      if (reason === 'clickaway') {\n        return;\n      }\n\n      _this.setState({\n        open: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(MyNotification, [{\n    key: \"renderNotification\",\n    value: function renderNotification() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"button-style\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Click View Your Reservation Status\")), React.createElement(Snackbar, {\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        },\n        open: this.state.open,\n        autoHideDuration: 6000,\n        onClose: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(MySnackbarContentWrapper, {\n        onClose: this.handleClose,\n        variant: \"success\",\n        message: \"Enjoy! Your reservation is completed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var output = this.renderNotification();\n      var myName = \"Notification\";\n      var string = \"\\n\\n    import Button from '@material-ui/core/Button';\\n    import Snackbar from '@material-ui/core/Snackbar';\\n\\n    <div>\\n        <Button onClick={this.handleClick}>Button</Button>\\n        <Snackbar\\n          anchorOrigin={{\\n            vertical: 'bottom',\\n            horizontal: 'left',\\n          }}\\n          open={this.state.open}\\n          onClose={this.handleClose}\\n          message={<span>Your message</span>}\\n          action={[\\n            <Button onClick={this.handleClose}>\\n              your option\\n            </Button>,\\n          ]}\\n        />\\n       </div>\";\n      var code = React.createElement(ReactMarkdown, {\n        source: string,\n        renderers: {\n          code: CodeBlock\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(MyTemplete, {\n        content: output,\n        name: myName,\n        sampleUsage: code,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MyNotification;\n}(React.Component);\n\nMyNotification.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles2)(MyNotification);","map":{"version":3,"sources":["/Users/yimingshan/Workplace/my-app/src/components/contentlist/Components/Notification/notification.js"],"names":["React","PropTypes","classNames","Button","CheckCircleIcon","ErrorIcon","InfoIcon","CloseIcon","green","amber","IconButton","Snackbar","SnackbarContent","WarningIcon","withStyles","MyTemplete","CodeBlock","ReactMarkdown","variantIcon","success","warning","error","info","styles1","theme","backgroundColor","palette","dark","primary","icon","fontSize","iconVariant","opacity","marginRight","spacing","unit","message","display","alignItems","MySnackbarContent","props","classes","className","onClose","variant","other","Icon","close","propTypes","object","isRequired","string","node","func","oneOf","MySnackbarContentWrapper","styles2","margin","MyNotification","state","open","handleClick","setState","handleClose","event","reason","vertical","horizontal","output","renderNotification","myName","code","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Button from '@material-ui/core/Button';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { withStyles } from '@material-ui/core/styles';\nimport MyTemplete  from '../../../templete';\nimport CodeBlock from '../../../';\nimport ReactMarkdown from 'react-markdown';\n\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon,\n};\n\nconst styles1 = theme => ({\n  success: {\n    backgroundColor: green[600],\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark,\n  },\n  info: {\n    backgroundColor: theme.palette.primary.dark,\n  },\n  warning: {\n    backgroundColor: amber[700],\n  },\n  icon: {\n    fontSize: 20,\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing.unit,\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n});\n\nfunction MySnackbarContent(props) {\n  const { classes, className, message, onClose, variant, ...other } = props;\n  const Icon = variantIcon[variant];\n\n\n\n  return (\n    <SnackbarContent\n      className={classNames(classes[variant], className)}\n      aria-describedby=\"client-snackbar\"\n      message={\n        <span id=\"client-snackbar\" className={classes.message}>\n          <Icon className={classNames(classes.icon, classes.iconVariant)} />\n          {message}\n        </span>\n      }\n      action={[\n        <IconButton\n          key=\"close\"\n          aria-label=\"Close\"\n          color=\"#A52A2A\"\n          className={classes.close}\n          onClick={onClose}\n        >\n          <CloseIcon className={classes.icon} />\n        </IconButton>,\n      ]}\n      {...other}\n    />\n  );\n}\n\nMySnackbarContent.propTypes = {\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  message: PropTypes.node,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\n};\n\nconst MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);\n\nconst styles2 = theme => ({\n  margin: {\n    margin: theme.spacing.unit,\n  },\n});\n\nclass MyNotification extends React.Component {\n  state = {\n    open: false,\n  };\n\n  handleClick = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    this.setState({ open: false });\n  };\n\n  renderNotification()\n  {\n\n    return(\n      <div>\n        <div className=\"button-style\">\n        <Button onClick={this.handleClick}>\n          Click View Your Reservation Status\n        </Button>\n        </div>\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'right',\n          }}\n          open={this.state.open}\n          autoHideDuration={6000}\n          onClose={this.handleClose}\n        >\n          <MySnackbarContentWrapper\n            onClose={this.handleClose}\n            variant=\"success\"\n            message=\"Enjoy! Your reservation is completed\"\n          />\n        </Snackbar>\n\n    </div>\n\n    );\n  }\n\n  render() {\n\n    let output = this.renderNotification();\n    let myName = \"Notification\";\n    let string = `\n\n    import Button from '@material-ui/core/Button';\n    import Snackbar from '@material-ui/core/Snackbar';\n\n    <div>\n        <Button onClick={this.handleClick}>Button</Button>\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          open={this.state.open}\n          onClose={this.handleClose}\n          message={<span>Your message</span>}\n          action={[\n            <Button onClick={this.handleClose}>\n              your option\n            </Button>,\n          ]}\n        />\n       </div>`;\n    let code = (<ReactMarkdown source={string} renderers={{ code: CodeBlock }}/>);\n    return(\n      <div>\n      <MyTemplete content = {output} name = {myName} sampleUsage={code}/>\n      </div>\n    );\n  }\n}\n\nMyNotification.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles2)(MyNotification);\n"]},"metadata":{},"sourceType":"module"}