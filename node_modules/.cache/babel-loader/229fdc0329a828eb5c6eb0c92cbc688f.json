{"ast":null,"code":"import _classCallCheck from \"/Users/yimingshan/Workplace/my-app1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yimingshan/Workplace/my-app1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yimingshan/Workplace/my-app1/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yimingshan/Workplace/my-app1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yimingshan/Workplace/my-app1/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/yimingshan/Workplace/my-app1/src/components/contentlist/Components/Markdown/markdown.js\";\nimport MyTemplete from '../../../templete';\nimport CodeBlock from '../../../';\nimport ReactMarkdown from 'react-markdown';\nimport React from 'react';\n\nvar MyMarkdown =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MyMarkdown, _React$Component);\n\n  function MyMarkdown() {\n    _classCallCheck(this, MyMarkdown);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MyMarkdown).apply(this, arguments));\n  }\n\n  _createClass(MyMarkdown, [{\n    key: \"buildString\",\n    value: function buildString() {\n      var text = \"\\n        import Badge from '@material-ui/core/Badge';\\n        import MailIcon from '@material-ui/icons/Mail';\\n\\n        <React.Fragment>\\n          <Badge className={classes.margin} badgeContent={99} color=\\\"primary\\\">\\n            <MailIcon />\\n            </Badge>\\n          <Badge className={classes.margin} badgeContent={100} color=\\\"primary\\\">\\n            <MailIcon />\\n          </Badge>\\n        </React.Fragment>\\n       \";\n      return text;\n    }\n  }, {\n    key: \"renderMarkdown\",\n    value: function renderMarkdown() {\n      var string = this.buildString();\n      var rendered = React.createElement(ReactMarkdown, {\n        source: string,\n        renderers: {\n          code: CodeBlock\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      });\n      return rendered;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var myName = \"Markdown\";\n      var output = this.renderMarkdown();\n      var sign = \"`\";\n      var string = \"\\n      import ReactMarkdown from 'react-markdown';\\n      import React from 'react';\\n      import CodeBlock from 'your path';\\n\\n      let string = \".concat(sign).concat(this.buildString()).concat(sign, \"\\n\\n      let code = (<ReactMarkdown source={string} renderers={{ code: CodeBlock }}/>);\\n\\n      return(\\n        {code}\\n      ); \");\n      var code = React.createElement(ReactMarkdown, {\n        source: string,\n        renderers: {\n          code: CodeBlock\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(MyTemplete, {\n        content: output,\n        name: myName,\n        sampleUsage: code,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MyMarkdown;\n}(React.Component);\n\nexport default MyMarkdown;","map":{"version":3,"sources":["/Users/yimingshan/Workplace/my-app1/src/components/contentlist/Components/Markdown/markdown.js"],"names":["MyTemplete","CodeBlock","ReactMarkdown","React","MyMarkdown","text","string","buildString","rendered","code","myName","output","renderMarkdown","sign","Component"],"mappings":";;;;;;AAAA,OAAOA,UAAP,MAAwB,mBAAxB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAEMC,U;;;;;;;;;;;;;kCAEU;AAEZ,UAAIC,IAAI,ubAAR;AAaA,aAAOA,IAAP;AACD;;;qCAGD;AACE,UAAIC,MAAM,GAAG,KAAKC,WAAL,EAAb;AAEA,UAAIC,QAAQ,GAAI,oBAAC,aAAD;AAAe,QAAA,MAAM,EAAEF,MAAvB;AAA+B,QAAA,SAAS,EAAE;AAAEG,UAAAA,IAAI,EAAER;AAAR,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAhB;AAEA,aAAOO,QAAP;AACD;;;6BAGD;AAEI,UAAIE,MAAM,GAAG,UAAb;AACA,UAAIC,MAAM,GAAG,KAAKC,cAAL,EAAb;AACA,UAAIC,IAAI,GAAG,GAAX;AACA,UAAIP,MAAM,mKAKKO,IALL,SAKY,KAAKN,WAAL,EALZ,SAKiCM,IALjC,yIAAV;AAaA,UAAIJ,IAAI,GAAI,oBAAC,aAAD;AAAe,QAAA,MAAM,EAAEH,MAAvB;AAA+B,QAAA,SAAS,EAAE;AAAEG,UAAAA,IAAI,EAAER;AAAR,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAZ;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAIU,MAAvB;AAA+B,QAAA,IAAI,EAAID,MAAvC;AAA+C,QAAA,WAAW,EAAID,IAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CADF;AAKH;;;;EAtDsBN,KAAK,CAACW,S;;AAyD/B,eAAeV,UAAf","sourcesContent":["import MyTemplete  from '../../../templete';\nimport CodeBlock from '../../../';\nimport ReactMarkdown from 'react-markdown';\nimport React from 'react';\n\nclass MyMarkdown extends React.Component\n{\n  buildString (){\n\n    let text =   `\n        import Badge from '@material-ui/core/Badge';\n        import MailIcon from '@material-ui/icons/Mail';\n\n        <React.Fragment>\n          <Badge className={classes.margin} badgeContent={99} color=\"primary\">\n            <MailIcon />\n            </Badge>\n          <Badge className={classes.margin} badgeContent={100} color=\"primary\">\n            <MailIcon />\n          </Badge>\n        </React.Fragment>\n       `;\n    return text;\n  }\n\n  renderMarkdown()\n  {\n    let string = this.buildString();\n\n    let rendered = (<ReactMarkdown source={string} renderers={{ code: CodeBlock }}/>);\n\n    return rendered;\n  }\n\n  render()\n  {\n\n      let myName = \"Markdown\";\n      let output = this.renderMarkdown();\n      let sign = \"`\";\n      let string = `\n      import ReactMarkdown from 'react-markdown';\n      import React from 'react';\n      import CodeBlock from 'your path';\n\n      let string = ${sign}${this.buildString()}${sign}\n\n      let code = (<ReactMarkdown source={string} renderers={{ code: CodeBlock }}/>);\n\n      return(\n        {code}\n      ); `;\n\n      let code = (<ReactMarkdown source={string} renderers={{ code: CodeBlock }}/>);\n      return(\n        <div>\n        <MyTemplete content = {output} name = {myName} sampleUsage = {code}/>\n        </div>\n      );\n  }\n}\n\nexport default MyMarkdown\n"]},"metadata":{},"sourceType":"module"}